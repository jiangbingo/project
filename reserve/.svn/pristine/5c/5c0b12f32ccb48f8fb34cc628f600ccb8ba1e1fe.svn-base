#! -*- encoding=utf-8 -*-
#! /usr/bin/env python
"""
Purpose of the script:
    reservation of the UTE cloud 
usage:
\npython reservation.py \n
"""

import os,sys

current_dir = os.path.dirname(__file__)
pyLibFolder = os.path.abspath(os.path.join(current_dir,'3rdPyLib'))
cloudApiFolder = os.path.abspath(os.path.join(current_dir,"uteCloudApi"))
sys.path.append(pyLibFolder)
sys.path.append(cloudApiFolder)
from ute_cloud_reservation_api.api import CloudReservationApi
from config import *
import datetime
from datetime import timedelta
from time import sleep
import requests,urllib3
urllib3.disable_warnings()

PROXY = "http://10.144.1.10:8080"
if 'http_proxy' not in os.environ:
    os.environ['http_proxy'] = PROXY
if 'https_proxy' not in os.environ:
    os.environ['https_proxy'] = PROXY

class Reservation(object):
    def __init__(self):
        self.name = person.keys()[0]
        self._bts_state = "configured"
        self._testline_type = RESERVATION_INFO["cloud_type"]
        self._reservation_duration = RESERVATION_INFO['reservation_duration']
        self._reservation = CloudReservationApi(api_token=person[self.name], api_address='https://cloud.ute.nsn-rdnet.net/')
        self._ute_build = RESERVATION_INFO['ute_build']
        self._share_with_list = []
        self._share_with_list.append(RESERVATION_INFO['share_with'])
        self._share_with = isinstance(RESERVATION_INFO['share_with'],list) and RESERVATION_INFO['share_with'] or self._share_with_list
        print 'share_with isï¼š',self._share_with
        if not RESERVATION_INFO["enb_build"]:
            raise RuntimeError("enb build is not set")

    def get_latest_reservation_id(self):
        latest_reserve_id = self._reservation.list_my_reservations()[-1]
        user = self.reservation_detail(latest_reserve_id)['user']
        latest_reserve_enb = self.reservation_detail(latest_reserve_id)['enb_build']
        print "get latest reservation information:\nuser:{}\nid:{}\nenb:{}".format(user,latest_reserve_id,latest_reserve_enb)
        return latest_reserve_id

    def get_reservation_list(self):
        reservation_list = []
        for status in ['Pending for testline','Testline assigned','Confirmed']:
            if self._reservation.list_my_reservations(status=status):
                reservation_list += self._reservation.list_my_reservations(status=status)
        return reservation_list

    def reservation_detail(self,reservation_id):
        reserve_detail = self._reservation.get_reservation_details(reservation_id)
        return reserve_detail

    def reservation_a_server(self):
        self._enb_build = getLatestENBBuild(RESERVATION_INFO["enb_build"])
        self.reservation_id = self._reservation.create_reservation(testline_type=self._testline_type,enb_build=self._enb_build,duration=self._reservation_duration,state=self._bts_state,ute_build=self._ute_build,share_with=self._share_with)
        print "success to reserve testline,reservation id is:{},enb build is:{}".format(self.reservation_id,self._enb_build)

    def extend_a_server(self,reservation_id):
        try:
            self._reservation.extend_reservation(reservation_id=reservation_id, duration=60)
            print "succeed to extend"
        except Exception as e:
            print e

    def available_time(self,reservation_id):
        start_date = self.reservation_detail(reservation_id)["start_date"]
        end_date = self.reservation_detail(reservation_id)["end_date"]
        if start_date and end_date:
            end_date_new = datetime.datetime.strptime(end_date.encode('utf-8'),"%Y-%m-%d %H:%M:%S.%f") + timedelta(hours=8)
            available_time = end_date_new - datetime.datetime.now()
            return available_time
        else:
            raise RuntimeError("testline is not confirmed")

    def auto_extend_reservation(self):
        if self._reservation.get_reservation_status(self.reservation_id) == "Confirmed":
            available_time = self.available_time(self.reservation_id)
            if available_time.total_seconds() > 0 and available_time.total_seconds() < 60 * 55:  # time <55min
                print "available time is {}s,begin to extend testline {}".format(available_time,self.reservation_id)
                self.extend_a_server(self.reservation_id)

    def schedule(self,schedule_time):
        if len(self.get_reservation_list()) <= 1:    # now allow max = 2 testlines
            interval_time(schedule_time)
            self.reservation_a_server()
            print "====now it will auto extend this testline until it ends===="
            for i in range(1000):
                print "auto extension sleep time"
                sleep(600)    # 600s= 10mins
                self.auto_extend_reservation()
        else:
            raise RuntimeError("max reservation count exceed,\nyou have reserved testline aleady ,id is{}".format(self.get_reservation_list()))
# ----------------------------------------------------------------------------------------------------------------------
def getLatestENBBuild(tag):
    URL = "https://cloud.ute.nsn-rdnet.net/artifact/list/ajax/?format=json&limit=1000&offset=0&ordering=-add_date&name={}&type=1&status=1".format(
        tag)
    header = {
        "Host": "cloud.ute.nsn - rdnet.net",
        'X-Requested-With': 'XMLHttpRequest',
        'Content-Type': 'application/json'
    }
    requests.packages.urllib3.disable_warnings()
    ret = requests.get(URL, headers=header)
    ret = ret.json()
    return ret["results"][0]["name"]

def interval_time(time):
    current_time = datetime.datetime.now()
    print "current time is {}".format(current_time)
    default_schedule_hour,default_schedule_minute = time.strip().split(":")
    schedule_time = current_time.replace(hour=int(default_schedule_hour),minute=int(default_schedule_minute),second=0,microsecond=0)
    if  schedule_time < current_time:
        schedule_time += timedelta(days=1)
    print "scheduled time to book a testline at {}".format(schedule_time)
    wait_time = (schedule_time - current_time).total_seconds()
    print "wait time :%s s"%wait_time
    sleep(wait_time)

# ----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":

  
    if not sys.argv[1:]:
        Reservation().schedule(RESERVATION_INFO["default_schedule_time"])
    else:
        print __doc__
        sys.exit(0)
    # print getLatestENBBuild('TL18_ENB_0000_000420_000036')

